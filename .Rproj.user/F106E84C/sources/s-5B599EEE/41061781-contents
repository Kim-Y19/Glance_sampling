require("reticulate")
library('R.matlab')
source('Rscript/load_packages.R')
rm(list = ls())
realdata = FALSE
source_python("Data/pickle_reader.py")
source("Rscript/prepare_df.R")

# read in deceleration and glances data
dec <- readMat("Data/Fitted_deceleration2.mat")
dec <- dec$out.dec
dec <- data.frame(dec[,1],dec[,2])
colnames(dec) <- c('dec','dec_weight')

glance <- readMat("Data/eyeGlanceDistributions_baseline_trans_moved_cspas.mat")
glance <-  data.frame(glance[[2]],glance[[3]])
colnames(glance) <- c('glance_duration','glance_weight')

if(realdata){
  # Get full grid of data from bi-sectional search
  df0 <- prepare_df(loadfile = "Data/new_test01.pkl", glance, dec)
  # If we have treatment data to load
  df1 <- prepare_df(loadfile = "Data/new_test02.pkl", glance, dec)
}else{
  # Get full grid of data from bi-sectional search
  df0 <- prepare_df(loadfile = "Data/test1.pkl", glance, dec)
  # If we don't have treatment data to load and just to modify it. Could be improved
  df1 <- df0
  for (j in unique(df1$caseID)){
    casedata = df1[df1$caseID == j,]
    casedata = casedata[order(casedata$impact_speed),]
    set.seed(j)
    max_v = max(casedata$impact_speed)
    new_max_v = max_v - abs(rnorm(1,max_v/6,3))
    #casedata[casedata$impact_speed == max_v,]$impact_speed = new_max_v
    for (i in 1:(length(casedata$impact_speed)-1)){
      set.seed(i + j)
      if (casedata$impact_speed[i] >0 & casedata$impact_speed[i]< max_v ){
        casedata$impact_speed[i] <- casedata$impact_speed[i] - abs(rnorm(1,casedata$impact_speed[i]/2,10))
      } else if (casedata$impact_speed[i]== max_v ){
        casedata$impact_speed[i] <- new_max_v
      }
      
      if (casedata$impact_speed[i]< 0){
        casedata$impact_speed[i] = 0
      }
    }
    df1[df1$caseID == j,] = casedata
  }
  df1 = df1[order(df1$caseID,df1$acc,df1$eoff),]
}
# 
impact_speed1 <- df1$impact_speed
impact_speed0 <- df0$impact_speed
# Injury risk function
intercept = -5.35
delta_v = 0.11
injury_risk0 = 1./(1+exp(-intercept-delta_v*impact_speed0/2))
injury_risk1 = 1./(1+exp(-intercept-delta_v*impact_speed1/2))
injury_risk_reduction = (injury_risk0-injury_risk1)/injury_risk0

speed_reduction = impact_speed0 - impact_speed1
df <- cbind(df0,impact_speed1,injury_risk0,injury_risk1,injury_risk_reduction,speed_reduction)
strangecases = df[df$speed_reduction<0,]

# loop for different seednum
seednum = 2
set.seed(seednum)
iteration = 100

# Rename variables, store in dataframe df.
df <- df %>% 
  as_tibble() %>%
  dplyr::rename(impact_speed0 = impact_speed) %>% 
  dplyr::select(caseID, eoff, acc, eoff_acc_prob, impact_speed0, impact_speed1, injury_risk0, injury_risk1) %>% 
  mutate(injury_risk0 = ifelse(impact_speed0 > 0, injury_risk0, 0), # Set injury risk to zero if no collision
         injury_risk1 = ifelse(impact_speed1 > 0, injury_risk1, 0)) 

if(realdata){
  save(df, file = "Data/glance_dec_data.R")
}else{
  save(df, file = "Data/glance_dec_data_test.R")
}
rm(list=setdiff(ls(), c(lsf.str(), "df")))
