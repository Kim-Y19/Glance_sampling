# Import ------------------------------------------------------------------


setwd("C:/Users/imbergh/Box Sync/Forskning/Glance")
BaselineGlanceDist <- read_csv("Data/BaselineGlanceDist.csv", col_names = FALSE) %>% 
  dplyr::rename(t = X1, count = X2)
head(BaselineGlanceDist)


# Derive datasets ---------------------------------------------------------


# Glance distribution.
zeroProb <- BaselineGlanceDist$count[1] / sum(BaselineGlanceDist$count)

x <- with(BaselineGlanceDist %>% filter(t > 0), rep(t, count))
fit <- fitdistrplus::fitdist(x, "lnorm")

glance <- BaselineGlanceDist %>% 
  mutate(relfreq = count / sum(count), 
         fitted_prob = dlnorm(t, meanlog  = fit$estimate["meanlog"], sdlog = fit$estimate["sdlog"]),
         fitted_prob = (t == 0) * zeroProb + (t > 0) * (1 - zeroProb) * fitted_prob / sum(fitted_prob)) # Normalise.
head(glance)


# Overshot distribution
overshot <- glance %>%
  mutate(prob = rev(cumsum(rev(fitted_prob / 1:length(fitted_prob)))),
         prob = prob / sum(prob)) %>% # Normalise.
  dplyr::select(-count, -relfreq, -fitted_prob) 
head(overshot)


# Bivariate undershot/overshot distribution.
biv <- crossing(before = seq(0, 6.1, 0.1), after = seq(0, 6.1, 0.1), glance) %>% 
  filter(abs(t - (before + after)) < 0.01) %>% 
  group_by(t) %>% 
  mutate(prob = fitted_prob / length(fitted_prob)) %>% 
  ungroup() %>% 
  arrange(after, before) %>% 
  dplyr::select(before, after, t, prob) 
head(biv)


# Check glance distribution
biv %>% 
  group_by(t) %>% 
  summarise(prob = sum(prob))


# Check overshot distribution. 
biv %>% 
  group_by(after) %>% 
  summarise(prob = sum(prob)) %>% 
  ungroup()


# Percentiles.
pctls <- overshot %>% 
  filter(t > 0) %>% 
  mutate(ecdf = cumsum(prob / sum(prob))) %>%
  filter(row_number() %in% c(which(ecdf > 0.5)[1],
                             which(ecdf > 0.9)[1],
                             which(ecdf > 0.99)[1],
                             which(ecdf > 0.999)[1])) %>%
  mutate(pctl = c(0.5, 0.9, 0.99, 0.999)) 
head(pctls)

# Plot.
ptsize <- 12
ptsmall <- 8

theme_set(theme_bw()) 
theme_update(axis.text = element_text(size = ptsize, colour = "black", family = "sans"),
             axis.line = element_line(colour = "black", size = 0.25), 
             axis.ticks = element_line(colour = "black", size = 0.25), 
             legend.key.width = unit(1.25, "cm"),
             legend.key.height = unit(0.4, "cm"),
             legend.margin = ggplot2::margin(t = -0.25, unit = 'cm'),
             legend.spacing =  unit(0, "cm"),
             legend.position = "bottom",
             legend.text = element_text(size = ptsmall, colour = "black", family = "sans"),
             legend.title = element_text(size = ptsmall, colour = "black", family = "sans"),
             strip.background.x = element_blank(),
             panel.border = element_blank(),
             panel.grid = element_blank(),  
             plot.subtitle = element_text(size = ptsmall, colour = "black", family = "sans", face = "plain", hjust = 0),
             plot.title = element_text(size = ptsize, colour = "black", family = "sans", face = "plain", hjust = 0),
             text = element_text(size = ptsize, colour = "black", family = "sans"))
ggplot() + 
  geom_rect(data = biv, aes(xmin = before - 0.05, xmax = before + 0.05, ymin = after - 0.05, ymax = after + 0.05, fill = prob), colour = "black", size = 0.01) + 
  geom_text(aes(x = 2.85, y = 5.7, label = "Probability"), hjust = 0, vjust = -1, size = 10 / ggplot2::.pt) + 
  coord_equal() + 
  scale_fill_continuous(type = "viridis", trans = "log10", labels = scales::scientific_format(scale = 1)) + 
  labs(x = "EOFF after tauinv = 0.2 (s)",
       y = "EOFF before tauinv = 0.2 (s)",
       fill = NULL) + 
  theme(legend.direction = "horizontal", 
        legend.justification = 1,
        legend.position = c(1, 0.85), 
        legend.key.height = unit(0.3, "cm"),
        legend.key.width = unit(0.8, "cm"))
ggsave("Output/BivDist.png", dpi = 1000, width = 90, height = 90, unit = "mm")
