absolute_injury_risk_reduction <- mean_injury_risk1 - mean_injury_risk0
relative_injury_risk_reduction <- mean_injury_risk1 / mean_injury_risk0
proportion_crashes_avoided <- 1 - with(crashes, sum(eoff_acc_prob * (impact_speed1 > 0)) / sum(eoff_acc_prob))
proportion_crashes_avoided
source("~/GitHub/Glance_sampling/Rscript/fitdist.R")
baseline_impact_speed_params <- with(crashes, fitdist(impact_speed0, eoff_acc_prob))
baseline_impact_speed_params
baseline_impact_speed_params <- with(crashes, fitdist(impact_speed0, eoff_acc_prob))$par
baseline_impact_speed_params
baseline_injury_risk_params <- with(crashes, fitdist(injury_risk0, eoff_acc_prob))$par # Mean and SD on log-scale.
baseline_injury_risk_params
exp(-4.4 + 0.7^2 / 2)
mean_injury_risk0
mean_injury_risk1
labelled
crashes <- labelled %>%
filter(impact_speed0 > 0)
baseline_impact_speed_params <- with(crashes, fitdist(impact_speed0, eoff_acc_prob))$par # Mean and SD on log-scale.
baseline_injury_risk_params <- with(crashes, fitdist(injury_risk0, eoff_acc_prob))$par # Mean and SD on log-scale.
names(baseline_impact_speed_params) <- names(baseline_injury_risk_params) <- c("logmean", "logSD")
baseline_impact_speed_params
baseline_injury_risk_params
source("~/GitHub/Glance_sampling/Rscript/estimate_targets.R")
# Calculate target quantities.
true_target_parematers <- estimate_targets(data)
true_target_parematers
# Calculate target quantities on full data.
ground_truth <- estimate_targets(data)
ground_truth
# Estimate target quantities.
effective_sample_size0 <- effective_sample_size1 <- nrow(labelled)
number_simulations0 <- sum(labelled$sim_count0)
number_simulations1 <- sum(labelled$sim_count1)
effective_sample_size0
number_simulations0
number_simulations1
est <- estimate_targets(labelled)
est
names(labelled)
source("~/GitHub/Glance_sampling/Rscript/estimate_targets.R")
# Calculate target quantities on full data.
ground_truth <- estimate_targets(data, weightvar = "eoff_acc_prob")
source("~/GitHub/Glance_sampling/Rscript/estimate_targets.R")
# Calculate target quantities on full data.
ground_truth <- estimate_targets(data, weightvar = "eoff_acc_prob")
ground_truth
est <- estimate_targets(labelled, weightvar = "final_weight")
est
bs <- crashes %>% nest(data = -caseID) %>% bootstraps(times = 1000)
library("rsample")
bs <- crashes %>% nest(data = -caseID) %>% bootstraps(times = 1000)
bs
?boot
?boot.ci
library("boot")
?boot
crashes <- labelled %>% filter(impact_speed0 > 0)
View(crashes)
est
enframe(est)
as.vector(est)
as.numeric(est)
unlist(est)
boot(crashes, statistic = function(data) unlist(estimate_targets(data, weightvar = "final_weight")), R = 100)
boot(crashes, statistic = function(data, ix) unlist(estimate_targets(data[ix, ], weightvar = "final_weight")), R = 100)
bs <- crashes %>% nest(data = -caseID) %>% bootstraps(times = 100)
boot(crashes, statistic = function(data, ix) unlist(estimate_targets(data[ix, ], weightvar = "final_weight")), R = 100)
bs <- crashes %>% nest(data = -caseID) %>% bootstraps(times = 100)
bs
est
bs2 <- map(bs$splits, ~as_tibble(.) %>% unnest(cols = -caseID) %>%
estimate_targets(., weightvar = "final_weight")) %>%
bind_rows(.id = 'boots')
bs2
View(boots)
View(bs2)
?sd
?wtd.var
Hmisc::wtd.var
source("~/GitHub/Glance_sampling/Rscript/estimate_targets.R")
ground_truth
# Calculate target quantities on full data.
ground_truth <- estimate_targets(data, weightvar = "eoff_acc_prob")
source("~/GitHub/Glance_sampling/Rscript/estimate_targets.R")
ground_truth
estimate_targets(data, weightvar = "eoff_acc_prob")
boot <- boot(crashes, statistic = function(data, ix) unlist(estimate_targets(data[ix, ], weightvar = "final_weight")), R = 100)
boot
ground_truth
est <- estimate_targets(labelled, weightvar = "final_weight")
est
boot
crashes <- labelled %>% filter(impact_speed0 > 0)
est <- boot(crashes, statistic = function(data, ix) unlist(estimate_targets(data[ix, ], weightvar = "final_weight")), R = 100)
# Estimate target quantities.
crashes <- labelled %>% filter(impact_speed0 > 0)
effective_sample_size0 <- effective_sample_size1 <- nrow(labelled)
number_simulations0 <- sum(labelled$sim_count0)
number_simulations1 <- sum(labelled$sim_count1)
est <- boot(crashes, statistic = function(data, ix) unlist(estimate_targets(data[ix, ], weightvar = "final_weight")), R = 100)
est
names(ground_rtu)
names(est)
est$statistic()
est$statistic
est$weights
est$t0
est$tt
est$t
names8est
names(est)
est$R
est$t0
est$t
names(est)
capture.output(est)
summary(est)$bootSE
summary(est)
summary(print(est))
summary(print(est))$bootSE
summary(est)
summar(print(est))
summary(print(est))
names(summary(print(est)))
names(summary(est))
summary(est)
est <- boot$t0
est
se <- apply(boot$t, 2 , sd)[1]
boot <- boot(crashes, statistic = function(data, ix) unlist(estimate_targets(data[ix, ], weightvar = "final_weight")), R = 100)
est <- boot$t0
est
se <- apply(boot$t, 2 , sd)[1]
se
se <- apply(boot$t, 2 , sd)
se
names(se) <- paste(names(est), "_se")
se
names(se) <- paste0(names(est), "_se")
se
tmpres <- cbind(est, se) %>%
as_tibble()
tmpres
tmpres <- rbind(est, se) %>%
as_tibble()
tmpres
tmpres <- cbind(est, se) %>%
as_tibble()
tmpres
tmpres <- c(est, se) %>%
as_tibble()
tmpres
tmpres <- est %>%
add_cols(se) %>%
as_tibble()
tmpres <- est %>%
add_column(se) %>%
as_tibble()
est
tmpres <- tibble(est) %>%
add_column(tibble(se))
tmpres
tibble(est)
tmpres <- est %>%
add_column(tibble(se))
est
enframe(est)
enframe(est) %>% gather()
as.list(eft)
as.list(est)
data.frame(as.list(est))
tibble(as.list(est))
as_tibble(as.list(est))
tmpres <- as_tibble(as.list(est)) %>%
add_column(as_tibble(as.list(se)))
tmpres
View(tmpres)
boot <- boot(crashes, statistic = function(data, ix) unlist(estimate_targets(data[ix, ], weightvar = "final_weight")), R = 100)
ground_truth
ground_truth
# Calculate target quantities on full data.
ground_truth <- estimate_targets(data, weightvar = "eoff_acc_prob")
ground_truth
source("~/GitHub/Glance_sampling/Rscript/estimate_targets.R")
source("~/GitHub/Glance_sampling/Rscript/estimate_targets.R")
# Calculate target quantities on full data.
ground_truth <- estimate_targets(data, weightvar = "eoff_acc_prob")
ground_truth
# Estimate target quantities.
crashes <- labelled %>% filter(impact_speed0 > 0)
effective_sample_size0 <- effective_sample_size1 <- nrow(labelled)
number_simulations0 <- sum(labelled$sim_count0)
number_simulations1 <- sum(labelled$sim_count1)
boot <- boot(crashes, statistic = function(data, ix) unlist(estimate_targets(data[ix, ], weightvar = "final_weight")), R = 100)
boot
est <- boot$t0
est
standard_error <- apply(boot$t, 2 , sd)
standard_error
squared_error <- (est - ground_truth)^2
squared_error
est
ground_truth
standard_error
standard_error <- apply(boot$t, 2 , sd)
squared_error <- (est - ground_truth)^2
squared_error
standard_error <- apply(boot$t, 2 , sd)
squared_error <- (est - ground_truth)^2
names(standard_error) <- paste0(names(est), "_stderr")
names(squared_error) <- paste0(names(est), "_sqerr")
standard_error
est <- boot$t0
se <- apply(boot$t, 2 , sd) # Standard error of estimator.
sqerr <- (est - ground_truth)^2 # Squared error with respect to ground truth.
names(se) <- paste0(names(est), "_se")
names(sq_err) <- paste0(names(est), "_sqerr")
tmpres <- as_tibble(as.list(est)) %>%
add_column(as_tibble(as.list(se)))  %>%
add_column(as_tibble(as.list(sqerr)))
est <- boot$t0
se <- apply(boot$t, 2 , sd) # Standard error of estimator.
sqerr <- (est - ground_truth)^2 # Squared error with respect to ground truth.
names(se) <- paste0(names(est), "_se")
names(sqerr) <- paste0(names(est), "_sqerr")
tmpres <- as_tibble(as.list(est)) %>%
add_column(as_tibble(as.list(se)))  %>%
add_column(as_tibble(as.list(sqerr)))
tmpres
newres <- as_tibble(as.list(est)) %>%
add_column(as_tibble(as.list(se)))  %>%
add_column(as_tibble(as.list(sqerr)))
newres
newres <- tibble(iter = i,
neff = effective_sample_size0,
nsim = number_simulations0 + number_simulations1) %>%
add_column(as_tibble(as.list(est))) %>%
add_column(as_tibble(as.list(se)))  %>%
add_column(as_tibble(as.list(sqerr)))
newres
i
newres <- tibble(iter = i,
neff = effective_sample_size0,
nsim = number_simulations0 + number_simulations1,
nsim0 = number_simulations0,
nsim1 = number_simulation1) %>%
add_column(as_tibble(as.list(est))) %>%
add_column(as_tibble(as.list(se)))  %>%
add_column(as_tibble(as.list(sqerr)))
newres
res <- res %>%
add_row(newres)
# To store results.
res <- NULL
res <- res %>%
add_row(newres)
if ( is.null(res) ) {
res <- newres
} else {
res %<>%
add_row(newres)
}
res
init <- "none"
# Initialise grid.
if ( init == "grid" ) {
# Initial grid.
grid <- crossing(eoff = range(data$eoff), acc = range(data$acc)) %>% # Corner points.
add_row(eoff = quantile(data$eoff, 0.5, type = 1),
acc = quantile(data$acc, 0.5, type = 1)) %>% # Add centre point.
mutate(sim_count0 = 1,
sim_count1 = 1)
# Labelled dataset.
labelled <- data %>%
left_join(grid, by = c("eoff", "acc")) %>%
filter(sim_count0 == 1) %>%
mutate(sim_count1 = as.numeric((impact_speed0 != 0)),
sampling_weight = 1)
# Unlabelled dataset.
unlabelled <- data %>%
left_join(grid, by = c("eoff", "acc")) %>%
filter(is.na(sim_count0)) %>%
dplyr::select( -impact_speed0, -impact_speed1, -injury_risk0, -injury_risk1) %>%
mutate(collision_prob0_pred = NA_real_,
collision_prob1_pred = NA_real_,
impact_speed0_pred = NA_real_,
impact_speed1_pred = NA_real_,
injury_risk0_pred = NA_real_,
injury_risk1_pred = NA_real_,
crash0 = NA_integer_,
crash1 = NA_integer_,
non_crash0 = NA_integer_,
non_crash1 = NA_integer_,
max_impact0 = NA_integer_,
max_impact1 = NA_integer_,
sim_count0 = 1,
sim_count1 = 1)
} else { # No initialisation, start with empty sample.
labelled <- data %>%
mutate(sim_count0 = 1,
sim_count1 = 1,
sampling_weight = 1) %>%
filter(0 == 1)
unlabelled <- data %>%
dplyr::select( -impact_speed0, -impact_speed1, -injury_risk0, -injury_risk1) %>%
mutate(collision_prob0_pred = NA_real_,
collision_prob1_pred = NA_real_,
impact_speed0_pred = NA_real_,
impact_speed1_pred = NA_real_,
injury_risk0_pred = NA_real_,
injury_risk1_pred = NA_real_,
crash0 = NA_real_,
crash1 = NA_real_,
non_crash0 = NA_real_,
non_crash1 = NA_real_,
max_impact0 = NA_real_,
max_impact1 = NA_real_,
sim_count0 = 1,
sim_count1 = 1)
} # End initialisation.
labelled
# Iterate
new_sample <- labelled
collision_counter <- 1
i <- 1
print(sprintf("Iteration %d", i))
# If reduce_simulations_by_logic = TRUE:
# Add data-points with certain outcomes (no collision or maximal impact speed collision)
# to labelled set, remove from unlabelled set.
if ( reduce_simulations_by_logic & nrow(new_sample) > 0 ) {
# Find all known non-crashes in unlabelled dataset.
ix <- find_non_crashes(new_sample, unlabelled)
unlabelled %<>%
mutate(non_crash0 = ifelse(row_number() %in% ix$non_crashes0, 1, non_crash0),
non_crash1 = ifelse(row_number() %in% ix$non_crashes1, 1, non_crash1),
sim_count0 = ifelse(row_number() %in% ix$non_crashes0, 0, sim_count0),
sim_count1 = ifelse(row_number() %in% ix$non_crashes1, 0, sim_count1))
#%>%
# filter( !(row_number() %in% ix$non_crashes0) ) # Remove baseline non-crashes from pool.
# Find all known crashes in unlabelled dataset.
ix <- find_crashes(new_sample, unlabelled)
unlabelled %<>%
mutate(crash0 = ifelse(row_number() %in% ix$crashes0, 1, crash0),
crash1 = ifelse(row_number() %in% ix$crashes0, 1, crash1))
# Find all known maximal impact speed crashes in unlabelled dataset.
ix <- find_max_impact_crashes(new_sample, labelled, unlabelled)
unlabelled %<>%
mutate(max_impact0 = ifelse(row_number() %in% ix$max_impact_crashes0, 1, max_impact0),
max_impact1 = ifelse(row_number() %in% ix$max_impact_crashes1, 1, max_impact1),
sim_count0 = ifelse(row_number() %in% ix$max_impact_crashes0, 0, sim_count0),
sim_count1 = ifelse(row_number() %in% ix$max_impact_crashes1, 0, sim_count1))
} # End reduce_simulations_by_logic.
reduce_simulations_by_logic
labelled
dim(unlabelled)
dim(data)
# Update predictions for cases with new data.
for ( j in unique(new_sample$caseID) ) {
# Update predictions.
pred0 <- update_predictions(labelled %>% filter(caseID == j),
unlabelled %>% filter(caseID == j),
yvar = "impact_speed0")
pred1 <- update_predictions(labelled %>% filter(caseID == j),
unlabelled %>% filter(caseID == j),
yvar = "impact_speed1")
unlabelled_j <- unlabelled %>%
filter(caseID == j) %>%
mutate(collision_prob0_pred = pred0$collision_prob,
collision_prob1_pred = pred1$collision_prob,
impact_speed0_pred = pred0$impact_speed_pred,
impact_speed1_pred = pred1$impact_speed_pred,
injury_risk0_pred = (1 + exp(-(-5.35 + 0.11 * impact_speed0_pred / 2)))^(-1),
injury_risk1_pred = (1 + exp(-(-5.35 + 0.11 * impact_speed1_pred / 2)))^(-1),
injury_risk0_pred = ifelse(impact_speed0_pred > 0, injury_risk0_pred, 0), # Set injury risk to zero if no collision.
injury_risk1_pred = ifelse(impact_speed1_pred > 0, injury_risk1_pred, 0))
ix <- which(unlabelled$caseID == j)
unlabelled[ix, ] <- unlabelled_j
} # End update predictions.
View(unlabelled)
# Calculate sampling probabilities.
prob <- calculate_sampling_scheme(unlabelled, sampling_method, target, num_cases_per_iteration)
dim(labelled)
is.null(labelled)
i == 1 & nrow(labelled) == 0
unique(labelled$caseID) %in% unique(unlabelled$caseID)
# Initialise grid.
grid <- crossing(eoff = range(data$eoff), acc = range(data$acc)) %>% # Corner points.
add_row(eoff = quantile(data$eoff, 0.5, type = 1),
acc = quantile(data$acc, 0.5, type = 1)) %>% # Add centre point.
mutate(sim_count0 = 1,
sim_count1 = 1)
grid
init <- initialise_with_grid(data, grid)
source("~/GitHub/Glance_sampling/Rscript/initialise_with_grid.R")
source("Rscript/initialise_with_grid.R")
source("~/GitHub/Glance_sampling/Rscript/initialise_with_grid.R")
# Initialise grid.
grid <- crossing(eoff = range(data$eoff), acc = range(data$acc)) %>% # Corner points.
add_row(eoff = quantile(data$eoff, 0.5, type = 1),
acc = quantile(data$acc, 0.5, type = 1)) %>% # Add centre point.
mutate(sim_count0 = 1,
sim_count1 = 1)
init <- initialise_grid(data, grid)
labelled <- init$labelled
unlabelled <- init$unlabelled
labelled
unlabelled
return(list(labelled = labelled, unlabelled = unlabelled))
source("~/GitHub/Glance_sampling/Rscript/initialise_grid.R")
# Initialise grid.
grid <- crossing(eoff = range(data$eoff), acc = range(data$acc)) %>% # Corner points.
add_row(eoff = quantile(data$eoff, 0.5, type = 1),
acc = quantile(data$acc, 0.5, type = 1)) %>% # Add centre point.
mutate(sim_count0 = 1,
sim_count1 = 1)
init <- initialise_grid(data, grid)
labelled <- init$labelled
unlabelled <- init$unlabelled
labelled
unlabelled
boot <- boot(crashes, statistic = function(data, ix) estimate_targets(data[ix, ], weightvar = "final_weight"), R = nboot)
nboot = 100
boot <- boot(crashes, statistic = function(data, ix) estimate_targets(data[ix, ], weightvar = "final_weight"), R = nboot)
boot
est <- boot$t0
se <- apply(boot$t, 2 , sd) # Standard error of estimator.
sqerr <- (est - ground_truth)^2 # Squared error with respect to ground truth.
names(se) <- paste0(names(est), "_se")
names(sqerr) <- paste0(names(est), "_sqerr")
newres <- tibble(iter = i,
neff = effective_sample_size0,
nsim = number_simulations0 + number_simulations1,
nsim0 = number_simulations0,
nsim1 = number_simulation1) %>%
add_column(as_tibble(as.list(est))) %>%
add_column(as_tibble(as.list(se)))  %>%
add_column(as_tibble(as.list(sqerr)))
newres <- tibble(iter = i,
neff = effective_sample_size0,
nsim = number_simulations0 + number_simulations1,
nsim0 = number_simulations0,
nsim1 = number_simulations1) %>%
add_column(as_tibble(as.list(est))) %>%
add_column(as_tibble(as.list(se)))  %>%
add_column(as_tibble(as.list(sqerr)))
newres
est
source("~/GitHub/Glance_sampling/Rscript/active_learning.R")
newres <- tibble(samping_method = sampling_method,
target = target,
reduce_simulations_by_logic = reduce_simulations_by_logic,
num_cases_per_iteration = num_cases_per_iteration) %>% # Meta-information.
add_column(iter = i,
neff = effective_sample_size0,
nsim = number_simulations0 + number_simulations1,
nsim0 = number_simulations0,
nsim1 = number_simulations1) %>% # Iteration history.
add_column(as_tibble(as.list(est))) %>% # Estimates.
add_column(as_tibble(as.list(se)))  %>% # Standard errors.
add_column(as_tibble(as.list(sqerr))) # Squared errors.
newres
Hmisc::wt.var
Hmisc::wtd.var()
?Hmisc::wtd.var
c(NULL,
"impact speed reduction",
"baseline impact speed distribution",
"proportion collisions avoided",
"injury risk reduction",
"baseline injury risk distribution")
sampling_method
sampling_method = "uniform"
# Check input parameters.
sampling_method <- match.arg(sampling_method)
target <- match.arg(target)
if ( sampling_method != "optimised " ) { target = "none" }
sampling_method
target
target <- "Hej"
if ( sampling_method != "optimised " ) { target = "none" }
target
newres <- tibble(samping_method = sampling_method,
target = target,
reduce_simulations_by_logic = reduce_simulations_by_logic,
num_cases_per_iteration = num_cases_per_iteration) %>% # Meta-information.
add_column(iter = i,
neff = effective_sample_size0,
nsim = number_simulations0 + number_simulations1,
nsim0 = number_simulations0,
nsim1 = number_simulations1) %>% # Iteration history.
add_column(as_tibble(as.list(est))) %>% # Estimates.
add_column(as_tibble(as.list(se)))  %>% # Standard errors.
add_column(as_tibble(as.list(sqerr))) # Squared errors.
newres
data <- df
active_learning(df, maxiter = 2)
source("~/GitHub/Glance_sampling/Rscript/active_learning.R")
active_learning(df, maxiter = 2)
source("~/GitHub/Glance_sampling/Rscript/active_learning.R")
active_learning(df, maxiter = 2)
source("~/GitHub/Glance_sampling/Rscript/calculate_sampling_scheme.R")
active_learning(df, maxiter = 2)
source("~/GitHub/Glance_sampling/Rscript/active_learning.R")
active_learning(df, maxiter = 2)
res <- active_learning(df, maxiter = 2)
View(res$labelled)
source("~/GitHub/Glance_sampling/Rscript/active_learning.R")
res <- active_learning(df, maxiter = 2)
names(res)
res$results
View(res$labelled)
names(data)
