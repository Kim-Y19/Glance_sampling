x <- seq(0, 1. 0.01)
x <- seq(0, 1, 0.01)
plot(x, sqrt(x))
x <- seq(0.01, 0.99, 0.01)
y <- log(x / (1 - x))
plot(x, sqrt(y))
y
plot(x, y)
plot(y, x)
plot(y, sqrt(x))
plot(y, sqrt(x), ylim = c(0, 1), bty = "l")
plot(y, x, ylim = c(0, 1), bty = "l")
source("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/sim_data_to_R.R")
source("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/sim_data_to_R.R")
source("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/sim_data_to_R.R")
DF
df
load("Data/glance_dec_data.R")
res <- active_learning (df, sampling_method = c("uniform"),
target = c("none"),
reduce_simulations_by_logic = TRUE, # TRUE or FALSE
num_cases_per_iteration = 1,
niter = 100,
nboot = 100)
source("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
res <- active_learning (df, sampling_method = c("uniform"),
target = c("none"),
reduce_simulations_by_logic = TRUE, # TRUE or FALSE
num_cases_per_iteration = 1,
niter = 100,
nboot = 100)
res
source("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
View(res)
source("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
sampling_method = c("uniform",
"propto eoff_acc_prob",
"propto eoff_acc_prob * eoff * maximpact0",
"propto eoff_acc_prob * abs(acc) * maximpact0",
"propto eoff_acc_prob * eoff * abs(acc) * maximpact0",
"optimised"),
target = c("none",
"baseline impact speed distribution",
"impact speed reduction",
"crash avoidance",
"injury risk reduction",
"injury risk reduction, stratified")
sampling_method = c("uniform",
"propto eoff_acc_prob",
"propto eoff_acc_prob * eoff * maximpact0",
"propto eoff_acc_prob * abs(acc) * maximpact0",
"propto eoff_acc_prob * eoff * abs(acc) * maximpact0",
"optimised")
target = c("none",
"baseline impact speed distribution",
"impact speed reduction",
"crash avoidance",
"injury risk reduction",
"injury risk reduction, stratified")
sampling_method
sampling_method[1]
sampling_method[2]
target[1]
source("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/sim_data_to_R.R")
library("tidyverse")
library("ggplot2")
g <- ggplot(res, aes(x = iter, y = absolute_impact_speed_reduction_se))
res
source("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/sim_data_to_R.R")
source("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/sim_data_to_R.R")
source("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/sim_data_to_R.R")
source("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/sim_data_to_R.R")
source("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/sim_data_to_R.R")
source('Rscripts/load_packages.R')
source('Rscript/load_packages.R')
source("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/sim_data_to_R.R")
source("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/sim_data_to_R.R")
sampling_method = c("uniform",
"propto eoff_acc_prob",
"propto eoff_acc_prob * eoff * maximpact0",
"propto eoff_acc_prob * abs(acc) * maximpact0",
"propto eoff_acc_prob * eoff * abs(acc) * maximpact0",
"optimised")
target = c("none",
"baseline impact speed distribution",
"impact speed reduction",
"crash avoidance",
"injury risk reduction",
"injury risk reduction, stratified")
res <- active_learning (df, sampling_method = c("uniform"),
target = c("none"),
reduce_simulations_by_logic = TRUE, # TRUE or FALSE
num_cases_per_iteration = 1,
niter = 100,
nboot = 100)
source("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
g <- ggplot(res, aes(x = iter, y = absolute_impact_speed_reduction_se))
res
res
ggplot(res, aes(x = iter, y = absolute_impact_speed_reduction_se))
g <- ggplot(res$results, aes(x = iter, y = absolute_impact_speed_reduction_se))
g
g <- ggplot(res$results, aes(x = iter, y = absolute_impact_speed_reduction_se)) +
geom_point()
g
g <- ggplot(res$results, aes(x = iter, y = sqrt(absolute_impact_speed_reduction_sqerr))) +
geom_point()
g
g <- ggplot(res$results, aes(x = iter, y = sqrt(absolute_impact_speed_reduction_sqerr))) +
geom_point(color = "firebrick", shape = "diamond", size = 2)
g
g <- ggplot(res$results, aes(x = iter, y = sqrt(absolute_impact_speed_reduction_sqerr))) +
geom_point(color = "firebrick", shape = "diamond", size = 2)+
labs(x = "Iteration", y = "Impact_speed_reduction_sd")
g
g <- ggplot(res$results, aes(x = iter, y = sqrt(absolute_impact_speed_reduction_sqerr))) +
geom_point(color = "firebrick", shape = "diamond", size = 2)+
labs(x = "Iteration", y = "Impact speed reductio sd")
g
g <- ggplot(res$results, aes(x = iter, y = sqrt(absolute_impact_speed_reduction_sqerr))) +
geom_point(color = "firebrick", shape = "diamond", size = 2)+
labs(x = "Iteration", y = "Impact speed reductio sd")+
theme(axis.title.x = element_text(vjust = 0, size = 15),
axis.title.y = element_text(vjust = 2, size = 15))
g
g <- ggplot(res$results, aes(x = iter, y = sqrt(absolute_impact_speed_reduction_sqerr))) +
geom_point(color = "firebrick", shape = "diamond", size = 2)+
labs(x = "Iteration", y = "Impact speed reductio sd")+
theme(axis.title.x = element_text(vjust = 0, size = 15),
axis.title.y = element_text(vjust = 2, size = 15),
axis.text = element_text(size = 12))
g <- ggplot(res$results, aes(x = iter, y = sqrt(absolute_impact_speed_reduction_sqerr))) +
geom_point(color = "firebrick", shape = "diamond", size = 2)+
labs(x = "Iteration", y = "Impact speed reductio sd")+
theme(axis.title.x = element_text(vjust = 0, size = 15),
axis.title.y = element_text(vjust = 2, size = 15),
axis.text = element_text(size = 15))
g <- ggplot(res$results, aes(x = iter, y = sqrt(absolute_impact_speed_reduction_sqerr))) +
geom_point(color = "firebrick", shape = "diamond", size = 2)+
labs(x = "Iteration", y = "Impact speed reductio sd")+
theme(axis.title.x = element_text(vjust = 0, size = 15),
axis.title.y = element_text(vjust = 2, size = 15),
axis.text = element_text(color = "dodgerblue", size = 12),
axis.text.x = element_text(face = "italic"))
g
g <- ggplot(res$results, aes(x = iter, y = sqrt(absolute_impact_speed_reduction_sqerr))) +
geom_point(color = "firebrick", shape = "diamond", size = 2)+
labs(x = "Iteration", y = "Impact speed reductio sd")+
theme(axis.title.x = element_text(vjust = 0, size = 15),
axis.title.y = element_text(vjust = 2, size = 15),
axis.text = element_text(size = 12))
g
g <- ggplot(res$results, aes(x = iter, y = sqrt(absolute_impact_speed_reduction_sqerr))) +
geom_point(color = "firebrick", shape = "diamond", size = 2)+
labs(x = "Iteration", y = "Impact speed reductio sd")+
theme(axis.title.x = element_text(vjust = 0, size = 15),
axis.title.y = element_text(vjust = 2, size = 15),
axis.text = element_text(size = 12))+
ggtitle("Impact speed reduction sd for sampling method")
g
view(res$results)
target[2:end]
target[2:end]
target[2:5]
res$results
res$results$mean_impact_speed0_sqerr
res$results$absolute_impact_speed_reduction_sqerr
str('t')
t
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
c("Impact speed baseline sd for sampling method " + i)
"Impact speed baseline sd for sampling method "
i
type(i)
class(i)
class("Impact speed baseline sd for sampling method ")
paste("Impact speed baseline sd for sampling method " + i)
paste("Impact speed baseline sd for sampling method " ,i)
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
ggsave(sprintf("Output/fig%d.png", fcount), g1, dpi = 1000, width = 270, height = 270, unit = "mm")
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
out_param
res$results$out_param
res$results[out_param]
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
g3 <- ggplot(res$results, aes(x = iter, y = sqrt(out_param_val))) +
geom_point(color = "firebrick", shape = "diamond", size = 2)+
labs(x = "Iteration", y = out_param)+
theme(axis.title.x = element_text(vjust = 0, size = 15),
axis.title.y = element_text(vjust = 2, size = 15),
axis.text = element_text(size = 12))+
ggtitle(paste(out_param, "sd for sampling method-" ,i))
g3
g2
g2 <- ggplot(res$results, aes(x = iter, y = sqrt(results[out_param]))) +
geom_point(color = "firebrick", shape = "diamond", size = 2)+
labs(x = "Iteration", y = out_param)+
theme(axis.title.x = element_text(vjust = 0, size = 15),
axis.title.y = element_text(vjust = 2, size = 15),
axis.text = element_text(size = 12))+
ggtitle(paste(out_param, "sd for sampling method:" ,i))
g2
g2 <- ggplot(res$results, aes(x = iter, y = sqrt(res$results[out_param]))) +
geom_point(color = "firebrick", shape = "diamond", size = 2)+
labs(x = "Iteration", y = out_param)+
theme(axis.title.x = element_text(vjust = 0, size = 15),
axis.title.y = element_text(vjust = 2, size = 15),
axis.text = element_text(size = 12))+
ggtitle(paste(out_param, "sd for sampling method:" ,i))
g2
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
source("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
load("Data/glance_dec_data.R")
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
sampling_method
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
target[2:5]
total_iter = 10
total_nboot = 10
for ( j in c(TRUE,FALSE)){
for (i in sampling_method[1:5]){
res <- active_learning (df, sampling_method = i,
target = "none",
reduce_simulations_by_logic = j, # TRUE or FALSE
num_cases_per_iteration = 1,
niter = total_iter,
nboot = total_nboot)
g3 <- ggplot(res$results, aes(x = iter, y = sqrt(mean_impact_speed0_sqerr))) +
geom_point(color = "firebrick", shape = "diamond", size = 2)+
labs(x = "Iteration", y = "Baseline impact speed sd")+
theme(axis.title.x = element_text(vjust = 0, size = 15),
axis.title.y = element_text(vjust = 2, size = 15),
axis.text = element_text(size = 12))+
ggtitle(paste("Impact speed baseline sd for" ,i,"and reduced logic is",j))
ggsave(sprintf("Output/fig%d.png", fcount), g3, dpi = 1000, width = 270, height = 270, unit = "mm")
fcount <- fcount + 1
ggsave(sprintf("Output/fig%d.png", fcount), g2, dpi = 1000, width = 270, height = 270, unit = "mm")
fcount <- fcount + 1
}
}
for ( j in c(TRUE,FALSE)){
for (i in sampling_method[1:5]){
res <- active_learning (df, sampling_method = i,
target = "none",
reduce_simulations_by_logic = j, # TRUE or FALSE
num_cases_per_iteration = 1,
niter = total_iter,
nboot = total_nboot)
g3 <- ggplot(res$results, aes(x = iter, y = sqrt(mean_impact_speed0_sqerr))) +
geom_point(color = "firebrick", shape = "diamond", size = 2)+
labs(x = "Iteration", y = "Baseline impact speed sd")+
theme(axis.title.x = element_text(vjust = 0, size = 15),
axis.title.y = element_text(vjust = 2, size = 15),
axis.text = element_text(size = 12))+
ggtitle(paste("Impact speed baseline sd for" ,i,"and reduced logic is",j))
ggsave(sprintf("Output/fig%d.png", fcount), g3, dpi = 1000, width = 270, height = 270, unit = "mm")
fcount <- fcount + 1
}
}
fcount = 1
for ( j in c(TRUE,FALSE)){
for (i in sampling_method[1:5]){
res <- active_learning (df, sampling_method = i,
target = "none",
reduce_simulations_by_logic = j, # TRUE or FALSE
num_cases_per_iteration = 1,
niter = total_iter,
nboot = total_nboot)
g3 <- ggplot(res$results, aes(x = iter, y = sqrt(mean_impact_speed0_sqerr))) +
geom_point(color = "firebrick", shape = "diamond", size = 2)+
labs(x = "Iteration", y = "Baseline impact speed sd")+
theme(axis.title.x = element_text(vjust = 0, size = 15),
axis.title.y = element_text(vjust = 2, size = 15),
axis.text = element_text(size = 12))+
ggtitle(paste("Impact speed baseline sd for" ,i,"and reduced logic is",j))
ggsave(sprintf("Output/fig%d.png", fcount), g3, dpi = 1000, width = 270, height = 270, unit = "mm")
fcount <- fcount + 1
}
}
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
j
for ( j in c(TRUE,FALSE)){
print(j)}
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
out
out$results
list(res,out$results)
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
res
res
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
out
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
out$results
out$results
t = do.call("rbind", out$results)
t
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
res_list
length(res_list)
out$results
out$results$target[2]
t.a = 1
t
pp.a = 1
pp
pp.a
pp.b = 2
pp
res = do.call(rbind, res_list)
res
out$results
view(res)
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
Sim_n
index = seq(p,total_iter*Sim_n,Sim_n)
seq(p,total_iter*Sim_n,Sim_n)
total_iter = 10
Sim_n = 5
seq(p,total_iter*Sim_n,Sim_n)
seq(p,total_iter*Sim_n,total_iter)
total_iter = 2
seq(p,total_iter*Sim_n,total_iter)
index = seq(p,total_iter*Sim_n,total_iter)
res[index]
view(res[index])
view(res)
res$mean_impact_speed0_sqerr
res$mean_impact_speed0_sqerr[index]
aver$mean_impact_speed0_sqerr = 1
aver = data.frame()
aver$mean_impact_speed0_sqerr = 1
aver = data.frame(nrow = iter)
aver = data.frame(nrow = total_iter)
aver$mean_impact_speed0_sqerr = 1
aver
aver = data.frame(nrow = total_iter)
biggest = data.frame(nrow = total_iter)
smallest = data.frame(nrow = total_iter)
mean(res$mean_impact_speed0_sqerr[index])
aver$mean_impact_speed0_sqerr[i] = mean(res$mean_impact_speed0_sqerr[index])
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
res$mean_impact_speed0_sqerr[index]
mean(res$mean_impact_speed0_sqerr[index])
aver$mean_impact_speed0_sqerr
aver$mean_impact_speed0_sqerr[i] = mean(res$mean_impact_speed0_sqerr[index])
i
aver$mean_impact_speed0_sqerr[p] = mean(res$mean_impact_speed0_sqerr[index])
p
p = 1
aver$mean_impact_speed0_sqerr[p] = mean(res$mean_impact_speed0_sqerr[index])
p = 2
aver$mean_impact_speed0_sqerr[p] = mean(res$mean_impact_speed0_sqerr[index])
aver$mean_impact_speed0_sqerr
aver$mean_impact_speed0_sqerr[p]
mean(res$mean_impact_speed0_sqerr[index])
index = seq(p,total_iter*Sim_n,total_iter)
mean(res$mean_impact_speed0_sqerr[index])
p = 2
index = seq(p,total_iter*Sim_n,total_iter)
aver$mean_impact_speed0_sqerr[p] = mean(res$mean_impact_speed0_sqerr[index])
aver$mean_impact_speed0_sqerr
aver = data.frame(nrow = total_iter,ncol = 4)
biggest = data.frame(nrow = total_iter)
smallest = data.frame(nrow = total_iter)
for(p in 1:total_iter){
index = seq(p,total_iter*Sim_n,total_iter)
aver$mean_impact_speed0_sqerr[p] = mean(res$mean_impact_speed0_sqerr[index])
}
mean(res$mean_impact_speed0_sqerr[index])
p = 1
index = seq(p,total_iter*Sim_n,total_iter)
mean(res$mean_impact_speed0_sqerr[index])
view(res)
index
index = matrix(nrow = total_iter)
for(p in 1:total_iter){
index[,p] = seq(p,total_iter*Sim_n,total_iter)
}
index = matrix(ncol = total_iter)
for(p in 1:total_iter){
index[,p] = seq(p,total_iter*Sim_n,total_iter)
}
index = matrix(nrow = Sim_n,ncol = total_iter)
for(p in 1:total_iter){
index[,p] = seq(p,total_iter*Sim_n,total_iter)
}
index
index = matrix(nrow = total_iter,ncol = Sim_n)
for(p in 1:total_iter){
index[,p] = seq(p,total_iter*Sim_n,total_iter)
}
index = matrix(nrow = total_iter,ncol = Sim_n)
for(p in 1:total_iter){
index[p,] = seq(p,total_iter*Sim_n,total_iter)
}
index
mean(res$mean_impact_speed0_sqerr[index[p,]])
mean(res$mean_impact_speed0_sqerr[index[,]])
mean(res$mean_impact_speed0_sqerr[index[1,]])
mean(res$mean_impact_speed0_sqerr[index[2,]])
aver$mean_impact_speed0_sqerr[p] = mean(res$mean_impact_speed0_sqerr[index[p,]])
colnamesforres = c("mean_impact_speed0_sqerr")
colnames(aver) = colnamesforres
aver
for(p in 1:total_iter){
index[p,] = seq(p,total_iter*Sim_n,total_iter)
aver$mean_impact_speed0_sqerr[p] = mean(res$mean_impact_speed0_sqerr[index[p,]])
}
aver = na
aver = NA
for(p in 1:total_iter){
index[p,] = seq(p,total_iter*Sim_n,total_iter)
aver$mean_impact_speed0_sqerr[p] = mean(res$mean_impact_speed0_sqerr[index[p,]])
}
colnamesforres = c("mean_impact_speed0_sqerr")
aver = data.frame(nrow = total_iter,ncol = 4)
biggest = data.frame(nrow = total_iter)
smallest = data.frame(nrow = total_iter)
colnames(aver) = colnamesforres
index = matrix(nrow = total_iter,ncol = Sim_n)
for(p in 1:total_iter){
index[p,] = seq(p,total_iter*Sim_n,total_iter)
aver$mean_impact_speed0_sqerr[p] = mean(res$mean_impact_speed0_sqerr[index[p,]])
}
AVER
aver
colnamesforres = c("mean_impact_speed0_sqerr")
aver = data.frame(nrow = total_iter,ncol = 4)
aver
aver = data.frame(data= NA)
aver
for(p in 1:total_iter){
index[p,] = seq(p,total_iter*Sim_n,total_iter)
aver$mean_impact_speed0_sqerr[p] = mean(res$mean_impact_speed0_sqerr[index[p,]])
}
aver = as.data.frame(matrix(nrowtotal_iter,ncol=5))
aver = as.data.frame(matrix(nrow=total_iter,ncol=5))
index = matrix(nrow = total_iter,ncol = Sim_n)
for(p in 1:total_iter){
index[p,] = seq(p,total_iter*Sim_n,total_iter)
aver$mean_impact_speed0_sqerr[p] = mean(res$mean_impact_speed0_sqerr[index[p,]])
}
aver
aver = as.data.frame(matrix(nrow=total_iter,ncol=0))
aver
for(p in 1:total_iter){
index[p,] = seq(p,total_iter*Sim_n,total_iter)
aver$mean_impact_speed0_sqerr[p] = mean(res$mean_impact_speed0_sqerr[index[p,]])
}
aver
for(p in 1:total_iter){
index[p,] = seq(p,total_iter*Sim_n,total_iter)
aver$iter[p] = mean(res$mean_impact_speed0_sqerr[index[p,]])
aver$mean_impact_speed0_sqerr[p] = mean(res$mean_impact_speed0_sqerr[index[p,]])
}
aver
for(p in 1:total_iter){
index[p,] = seq(p,total_iter*Sim_n,total_iter)
aver$iter[p] = mean(res$iter[index[p,]])
aver$mean_impact_speed0_sqerr[p] = mean(res$mean_impact_speed0_sqerr[index[p,]])
}
aver
res$iter
for(p in 1:total_iter){
index[p,] = seq(p,total_iter*Sim_n,total_iter)
aver$iter[p] = mean(res$iter[p])
aver$mean_impact_speed0_sqerr[p] = mean(res$mean_impact_speed0_sqerr[index[p,]])
}
aver
for(p in 1:total_iter){
index[p,] = seq(p,total_iter*Sim_n,total_iter)
aver$iter[p] = mean(res$iter[p])
aver$mean_impact_speed0_sqerr[p] = mean(res$mean_impact_speed0_sqerr[index[p,]])
aver$absolute_impact_speed_reduction_sqerr[p] = mean(res$absolute_impact_speed_reduction_sqerr[index[p,]])
aver$proportion_crashes_avoided_sqerr[p] = mean(res$proportion_crashes_avoided_sqerr[index[p,]])
aver$absolute_injury_risk_reduction_sqerr[p] = mean(res$absolute_injury_risk_reduction_sqerr[index[p,]])
}
aver
aver = []
aver = NA
#colnamesforres = c("mean_impact_speed0_sqerr")
aver = as.data.frame(matrix(nrow=total_iter,ncol=0))
biggest = as.data.frame(matrix(nrow=total_iter,ncol=0))
smallest = as.data.frame(matrix(nrow=total_iter,ncol=0))
colnames(aver) = colnamesforres
index = matrix(nrow = total_iter,ncol = Sim_n)
for(p in 1:total_iter){
index[p,] = seq(p,total_iter*Sim_n,total_iter)
aver$iter[p] = mean(res$iter[p])
aver$mean_impact_speed0_sqerr[p] = mean(res$mean_impact_speed0_sqerr[index[p,]])
aver$absolute_impact_speed_reduction_sqerr[p] = mean(res$absolute_impact_speed_reduction_sqerr[index[p,]])
aver$proportion_crashes_avoided_sqerr[p] = mean(res$proportion_crashes_avoided_sqerr[index[p,]])
aver$absolute_injury_risk_reduction_sqerr[p] = mean(res$absolute_injury_risk_reduction_sqerr[index[p,]])
}
aver
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
total_iter
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
source("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/sim_data_to_R.R")
debugSource("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/run_post_analysis.R")
source("~/upload/Git/updated_Glance_Sampling/Glance_sampling/Rscript/sim_data_to_R.R")
