# Sample cases.
cases <- as.numeric(names(table(unlabelled$caseID)))
new_cases <- cases[which(UPmaxentropy(prob$case_probability) == 1)]
new_cases
# Sample variations.
ix <- rep(0, nrow(unlabelled)) # Binary selection indicator.
for ( j in seq_along(new_cases) ) {
jx <- which(unlabelled$caseID == new_cases[j])
ix[jx] <- as.numeric(rmultinom(n = 1, size = 1, prob = prob$sampling_probability[jx]))
}
new_wt <- ix / prob$sampling_probability
new_wt[is.na(new_wt)] <- 0
# Get data for sampled observations.
new_sample <- unlabelled %>%
mutate(sampling_weight = 0,
new_wt = new_wt) %>%
filter(new_wt > 0) %>%
dplyr::select(caseID, eoff, acc, eoff_acc_prob, sim_count0, sim_count1, sampling_weight, new_wt) %>%
left_join(data, by = c("caseID", "eoff", "acc", "eoff_acc_prob"))
# Get data for sampled observations.
new_sample <- unlabelled %>%
mutate(sampling_weight = 0,
new_wt = new_wt) %>%
filter(new_wt > 0) %>%
dplyr::select(caseID, eoff, acc, eoff_acc_prob, sim_count0, sim_count1, sampling_weight, new_wt) %>%
left_join(data, by = c("caseID", "eoff", "acc", "eoff_acc_prob"))
unlabelled
data <- df
# Get data for sampled observations.
new_sample <- unlabelled %>%
mutate(sampling_weight = 0,
new_wt = new_wt) %>%
filter(new_wt > 0) %>%
dplyr::select(caseID, eoff, acc, eoff_acc_prob, sim_count0, sim_count1, sampling_weight, new_wt) %>%
left_join(data, by = c("caseID", "eoff", "acc", "eoff_acc_prob"))
new_sample
View(new_sample)
# Update labelled and unlabelled sets.
labelled <- labelled %>%
mutate(new_wt = 1) %>% # Re-query labelled data points with probability 1.
add_row(new_sample) %>%
mutate(sampling_weight = sampling_weight + (new_wt - sampling_weight) / collision_counter,
final_weight = eoff_acc_prob * sampling_weight) %>%
dplyr::select(-new_wt)
unlabelled %<>%
mutate(new_wt = new_wt) %>%
filter(new_wt <= 0) %>%
dplyr::select(-new_wt)
View(labelled)
# Estimate target quantities.
crashes <- labelled %>% filter(impact_speed0 > 0)
crashes
effective_sample_size0 <- effective_sample_size1 <- nrow(labelled)
effective_sample_size0
effective_sample_size0
effective_sample_size1
number_simulations0 <- sum(labelled$sim_count0)
number_simulations1 <- sum(labelled$sim_count1)
number_simulations0
number_simulations1
actual_number_simulations0 <- sum(labelled$sim_count0)
actual_number_simulations1 <- sum(labelled$sim_count1)
actual_number_simulations0
actual_number_simulations1
boot <- boot(crashes, statistic = function(data, ix) estimate_targets(data[ix, ], weightvar = "final_weight"), R = nboot)
nboot <- 100
boot <- boot(crashes, statistic = function(data, ix) estimate_targets(data[ix, ], weightvar = "final_weight"), R = nboot)
est <- boot$t0
se <- apply(boot$t, 2 , sd) # Standard error of estimator.
sqerr <- (est - ground_truth)^2 # Squared error with respect to ground truth.
est
est <- boot$t0
se <- apply(boot$t, 2 , sd) # Standard error of estimator.
se
sqerr <- (est - ground_truth)^2 # Squared error with respect to ground truth.
sqerr
est + c(-1, 1) * 1.96 * se
est - * 1.96 * se
est - 1.96 * se
est + 1.96 * se
se <- apply(boot$t, 2 , sd) # Standard error of estimate.
sqerr <- (est - ground_truth)^2 # Squared error with respect to ground truth.
names(se) <- paste0(names(est), "_se")
names(sqerr) <- paste0(names(est), "_sqerr")
newres <- tibble(samping_method = sampling_method,
target = target,
reduce_simulations_by_logic = reduce_simulations_by_logic,
num_cases_per_iteration = num_cases_per_iteration) %>% # Meta-information.
add_column(iter = i,
neff = effective_sample_size0,
nsim = number_simulations0 + number_simulations1,
nsim0 = number_simulations0,
nsim1 = number_simulations1) %>% # Iteration history.
add_column(as_tibble(as.list(est))) %>% # Estimates.
add_column(as_tibble(as.list(se)))  %>% # Standard errors.
add_column(as_tibble(as.list(sqerr))) # Squared errors.
i <- 1
newres <- tibble(samping_method = sampling_method,
target = target,
reduce_simulations_by_logic = reduce_simulations_by_logic,
num_cases_per_iteration = num_cases_per_iteration) %>% # Meta-information.
add_column(iter = i,
neff = effective_sample_size0,
nsim = number_simulations0 + number_simulations1,
nsim0 = number_simulations0,
nsim1 = number_simulations1) %>% # Iteration history.
add_column(as_tibble(as.list(est))) %>% # Estimates.
add_column(as_tibble(as.list(se)))  %>% # Standard errors.
add_column(as_tibble(as.list(sqerr))) # Squared errors.
View(newres)
if ( is.null(res) ) {
res <- newres
} else {
res %<>%
add_row(newres)
}
# Increase counter if at least one new crash has been generated in baseline scenario.
collision_counter <- collision_counter + (any(new_sample$impact_speed0 > 0))
source("~/GitHub/Glance_sampling/Rscript/active_learning.R")
res <- active_learning(data, sampling_method = "optimised", target = "impact speed reduction", num_cases_per_iteration = 5, niter <- 5)
res <- active_learning(data, sampling_method = "optimised", target = "impact speed reduction", num_cases_per_iteration = 5, niter = 5)
res <- active_learning(data, sampling_method = "optimised", target = "impact speed reduction", num_cases_per_iteration = 5, niter = 5)
res <- active_learning(data, sampling_method = "uniform", target = "impact speed reduction", num_cases_per_iteration = 5, niter = 5)
names(res)
View(res$results)
source("~/GitHub/Glance_sampling/Rscript/active_learning.R")
res <- active_learning(data, sampling_method = "uniform", target = "impact speed reduction", num_cases_per_iteration = 5, niter = 5)
source("~/GitHub/Glance_sampling/Rscript/active_learning.R")
res <- active_learning(data, sampling_method = "uniform", target = "impact speed reduction", num_cases_per_iteration = 5, niter = 5)
View(res$results)
View(results$labelled)
View(res$labelled)
library("readxl")
library("tidyverse")
library("writexl")
# Import baseline glance distribution.
BaselineGlanceDist <- read_csv("Data/BaselineGlanceDist.csv", col_names = FALSE) %>%
dplyr::rename(t = X1, count = X2)
# Fit lognormal model to glance distribution.
zeroProb <- BaselineGlanceDist$count[1] / sum(BaselineGlanceDist$count)
zeroProb
x <- with(BaselineGlanceDist %>% filter(t > 0), rep(t, count))
fit <- fitdistrplus::fitdist(x, "lnorm")
fit
Hmisc::wtd.var()
glance <- BaselineGlanceDist %>%
mutate(relfreq = count / sum(count),
fitted_prob1 = dlnorm(t, meanlog  = fit$estimate["meanlog"], sdlog = fit$estimate["sdlog"]),
fitted_prob = dlnorm(t, meanlog  = fit$estimate["meanlog"], sdlog = fit$estimate["sdlog"]),
fitted_prob = (t == 0) * zeroProb + (t > 0) * (1 - zeroProb) * fitted_prob / sum(fitted_prob)) # Normalise.
glance
glance <- BaselineGlanceDist %>%
mutate(relfreq = count / sum(count),
fitted_prob = dlnorm(t, meanlog  = fit$estimate["meanlog"], sdlog = fit$estimate["sdlog"]),
fitted_prob = (t == 0) * zeroProb + (t > 0) * (1 - zeroProb) * fitted_prob / sum(fitted_prob)) # Normalise.
glance
# Derive overshot distribution.
overshot <- glance %>%
mutate(prob = rev(cumsum(rev(fitted_prob / 1:length(fitted_prob)))),
prob = prob / sum(prob)) %>% # Normalise.
dplyr::select(-count, -relfreq, -fitted_prob) %>%
filter(t > 0) %>%
mutate(prob = prob / sum(prob))
overshot
# Derive overshot distribution.
overshot <- glance %>%
mutate(prob = rev(cumsum(rev(fitted_prob / 1:length(fitted_prob)))),
prob = prob / sum(prob)) %>% # Normalise.
dplyr::select(-count, -relfreq, -fitted_prob) %>%
filter(t > 0) %>%
mutate(prob = prob / sum(prob))
overshot
glance %>%
mutate(prob = rev(cumsum(rev(fitted_prob / 1:length(fitted_prob)))),
prob = prob / sum(prob))
glance <- BaselineGlanceDist %>%
mutate(relfreq = count / sum(count),
fitted_prob = dlnorm(t, meanlog  = fit$estimate["meanlog"], sdlog = fit$estimate["sdlog"]),
fitted_prob = (t == 0) * zeroProb + (t > 0) * (1 - zeroProb) * fitted_prob / sum(fitted_prob)) # Normalise.
glance
glance
# Derive overshot distribution.
overshot <- glance %>%
mutate(prob = rev(cumsum(rev(fitted_prob / 1:length(fitted_prob)))),
prob = prob / sum(prob)) %>% # Normalise.
dplyr::select(-count, -relfreq, -fitted_prob) %>%
filter(t > 0) %>%
mutate(prob = prob / sum(prob))
overshot
BaselineGlanceDist <- read_csv("Data/BaselineGlanceDist.csv", col_names = FALSE) %>%
dplyr::rename(t = X1, count = X2)
head(BaselineGlanceDist)
# Glance distribution.
zeroProb <- BaselineGlanceDist$count[1] / sum(BaselineGlanceDist$count)
x <- with(BaselineGlanceDist %>% filter(t > 0), rep(t, count))
fit <- fitdistrplus::fitdist(x, "lnorm")
glance <- BaselineGlanceDist %>%
mutate(relfreq = count / sum(count),
fitted_prob = dlnorm(t, meanlog  = fit$estimate["meanlog"], sdlog = fit$estimate["sdlog"]),
fitted_prob = (t == 0) * zeroProb + (t > 0) * (1 - zeroProb) * fitted_prob / sum(fitted_prob)) # Normalise.
# Overshot distribution
overshot <- glance %>%
mutate(prob = rev(cumsum(rev(fitted_prob / 1:length(fitted_prob)))),
prob = prob / sum(prob)) %>% # Normalise.
dplyr::select(-count, -relfreq, -fitted_prob)
head(overshot)
BaselineGlanceDist <- read_csv("Data/BaselineGlanceDist.csv", col_names = FALSE) %>%
dplyr::rename(t = X1, count = X2)
head(BaselineGlanceDist)
# Glance distribution.
zeroProb <- BaselineGlanceDist$count[1] / sum(BaselineGlanceDist$count)
x <- with(BaselineGlanceDist %>% filter(t > 0), rep(t, count))
fit <- fitdistrplus::fitdist(x, "lnorm")
glance <- BaselineGlanceDist %>%
mutate(relfreq = count / sum(count),
fitted_prob = dlnorm(t, meanlog  = fit$estimate["meanlog"], sdlog = fit$estimate["sdlog"]),
fitted_prob = (t == 0) * zeroProb + (t > 0) * (1 - zeroProb) * fitted_prob / sum(fitted_prob)) # Normalise.
head(glance)
# Overshot distribution
overshot <- glance %>%
mutate(prob = rev(cumsum(rev(fitted_prob / 1:length(fitted_prob)))),
prob = prob / sum(prob)) %>% # Normalise.
dplyr::select(-count, -relfreq, -fitted_prob)
head(overshot)
# Bivariate undershot/overshot distribution.
biv <- crossing(before = seq(0, 6.1, 0.1), after = seq(0, 6.1, 0.1), glance) %>%
filter(abs(t - (before + after)) < 0.01) %>%
group_by(t) %>%
mutate(prob = fitted_prob / length(fitted_prob)) %>%
ungroup() %>%
arrange(after, before) %>%
dplyr::select(before, after, t, prob)
head(biv)
# Check glance distribution
biv %>%
group_by(t) %>%
summarise(prob = sum(prob))
glance
# Check overshot distribution.
biv %>%
group_by(after) %>%
summarise(prob = sum(prob)) %>%
ungroup()
overshot
source("C:/Users/imbergh/Box Sync/Forskning/Glance/Rscript/create_overshot_dist_data.R")
getwd()
overshot
# Overshot distribution
overshot <- glance %>%
mutate(prob = rev(cumsum(rev(fitted_prob / 1:length(fitted_prob)))),
prob = prob / sum(prob)) %>% # Normalise.
dplyr::select(-count, -relfreq, -fitted_prob)
head(overshot)
names(bi)
names(biv)
# Plot.
ggplot(data = biv) +
geom_rect(aes(xmin = after - 0.05, xmax = after + 0.05, ymin = before - 0.05, ymax = before + 0.05, fill = prob)) +
geom_rect(data = df_with_y %>% filter(y == 0), aes(xmin = after - 0.05, xmax = after + 0.05, ymin = before - 0.05, ymax = before + 0.05), fill = "salmon") +
scale_fill_continuous(type = "viridis", labels = scales::number_format(digits = 1)) +
coord_equal() +
expand_limits(fill = c(0, 25)) +
labs(x = "EOFF after tauinv = 0.2 (s)",
y = "EOFF before tauinv = 0.2 (s)",
fill = "Impact speed (km/h)") +
theme(legend.direction = "horizontal",
legend.justification = 0.5,
legend.position = "bottom",
legend.key.height = unit(0.3, "cm"),
legend.key.width = unit(0.6, "cm"))
# Plot.
ggplot(data = biv) +
geom_rect(aes(xmin = after - 0.05, xmax = after + 0.05, ymin = before - 0.05, ymax = before + 0.05, fill = prob)) +
scale_fill_continuous(type = "viridis", labels = scales::number_format(digits = 1)) +
coord_equal() +
expand_limits(fill = c(0, 25)) +
labs(x = "EOFF after tauinv = 0.2 (s)",
y = "EOFF before tauinv = 0.2 (s)",
fill = "Impact speed (km/h)") +
theme(legend.direction = "horizontal",
legend.justification = 0.5,
legend.position = "bottom",
legend.key.height = unit(0.3, "cm"),
legend.key.width = unit(0.6, "cm"))
ggplot() +
geom_rect(data = biv, aes(xmin = before - 0.05, xmax = before + 0.05, ymin = after - 0.05, ymax = after + 0.05, fill = prob), colour = "black", size = 0.01) +
geom_text(aes(x = 3, y = 6.1, label = "Probability"), hjust = 0, vjust = -1, size = ptsize / ggplot2::.pt) +
coord_equal() +
scale_fill_continuous(type = "viridis", trans = "log10", labels = scales::scientific_format(scale = 1)) +
labs(x = "EOFF after tauinv = 0.2 (s)",
y = "EOFF before tauinv = 0.2 (s)",
fill = NULL) +
theme(legend.direction = "horizontal",
legend.justification = 1,
legend.position = c(1, 0.9),
legend.key.height = unit(0.3, "cm"),
legend.key.width = unit(0.8, "cm"))
ggplot() +
geom_rect(data = biv, aes(xmin = before - 0.05, xmax = before + 0.05, ymin = after - 0.05, ymax = after + 0.05, fill = prob), colour = "black", size = 0.01) +
geom_text(aes(x = 3, y = 6.1, label = "Probability"), hjust = 0, vjust = -1, size = 10 / ggplot2::.pt) +
coord_equal() +
scale_fill_continuous(type = "viridis", trans = "log10", labels = scales::scientific_format(scale = 1)) +
labs(x = "EOFF after tauinv = 0.2 (s)",
y = "EOFF before tauinv = 0.2 (s)",
fill = NULL) +
theme(legend.direction = "horizontal",
legend.justification = 1,
legend.position = c(1, 0.9),
legend.key.height = unit(0.3, "cm"),
legend.key.width = unit(0.8, "cm"))
# Plot.
ggplot() +
geom_rect(data = biv, aes(xmin = before - 0.05, xmax = before + 0.05, ymin = after - 0.05, ymax = after + 0.05, fill = prob), colour = "black", size = 0.01) +
geom_text(aes(x = 3, y = 6.1, label = "Probability"), hjust = 0, vjust = -1, size = 10 / ggplot2::.pt) +
coord_equal() +
scale_fill_continuous(type = "viridis", trans = "log10", labels = scales::scientific_format(scale = 1)) +
labs(x = "EOFF after tauinv = 0.2 (s)",
y = "EOFF before tauinv = 0.2 (s)",
fill = NULL) +
theme(legend.direction = "horizontal",
legend.justification = 1,
legend.position = c(1, 0.9),
legend.key.height = unit(0.3, "cm"),
legend.key.width = unit(0.8, "cm"))
# Check glance distribution
biv %>%
group_by(t) %>%
summarise(prob = sum(prob))
# Plot.
ggplot() +
geom_rect(data = biv, aes(xmin = before - 0.05, xmax = before + 0.05, ymin = after - 0.05, ymax = after + 0.05, fill = prob), colour = "black", size = 0.01) +
geom_text(aes(x = 3, y = 6.1, label = "Probability"), hjust = 0, vjust = -1, size = 10 / ggplot2::.pt) +
coord_equal() +
scale_fill_continuous(type = "viridis", trans = "log10", labels = scales::scientific_format(scale = 1)) +
labs(x = "EOFF after tauinv = 0.2 (s)",
y = "EOFF before tauinv = 0.2 (s)",
fill = NULL) +
theme(legend.direction = "horizontal",
legend.justification = 1,
legend.position = c(1, 0.9),
legend.key.height = unit(0.3, "cm"),
legend.key.width = unit(0.8, "cm"))
getwd()
setwd("C:/Users/imbergh/Box Sync/Forskning/Glance")
BaselineGlanceDist <- read_csv("Data/BaselineGlanceDist.csv", col_names = FALSE) %>%
dplyr::rename(t = X1, count = X2)
head(BaselineGlanceDist)
# Glance distribution.
zeroProb <- BaselineGlanceDist$count[1] / sum(BaselineGlanceDist$count)
x <- with(BaselineGlanceDist %>% filter(t > 0), rep(t, count))
fit <- fitdistrplus::fitdist(x, "lnorm")
glance <- BaselineGlanceDist %>%
mutate(relfreq = count / sum(count),
fitted_prob = dlnorm(t, meanlog  = fit$estimate["meanlog"], sdlog = fit$estimate["sdlog"]),
fitted_prob = (t == 0) * zeroProb + (t > 0) * (1 - zeroProb) * fitted_prob / sum(fitted_prob)) # Normalise.
head(glance)
# Overshot distribution
overshot <- glance %>%
mutate(prob = rev(cumsum(rev(fitted_prob / 1:length(fitted_prob)))),
prob = prob / sum(prob)) %>% # Normalise.
dplyr::select(-count, -relfreq, -fitted_prob)
head(overshot)
# Bivariate undershot/overshot distribution.
biv <- crossing(before = seq(0, 6.1, 0.1), after = seq(0, 6.1, 0.1), glance) %>%
filter(abs(t - (before + after)) < 0.01) %>%
group_by(t) %>%
mutate(prob = fitted_prob / length(fitted_prob)) %>%
ungroup() %>%
arrange(after, before) %>%
dplyr::select(before, after, t, prob)
head(biv)
# Check glance distribution
biv %>%
group_by(t) %>%
summarise(prob = sum(prob))
# Check overshot distribution.
biv %>%
group_by(after) %>%
summarise(prob = sum(prob)) %>%
ungroup()
# Percentiles.
pctls <- overshot %>%
filter(t > 0) %>%
mutate(ecdf = cumsum(prob / sum(prob))) %>%
filter(row_number() %in% c(which(ecdf > 0.5)[1],
which(ecdf > 0.9)[1],
which(ecdf > 0.99)[1],
which(ecdf > 0.999)[1])) %>%
mutate(pctl = c(0.5, 0.9, 0.99, 0.999))
head(pctls)
# Plot.
ggplot() +
geom_rect(data = biv, aes(xmin = before - 0.05, xmax = before + 0.05, ymin = after - 0.05, ymax = after + 0.05, fill = prob), colour = "black", size = 0.01) +
geom_text(aes(x = 3, y = 6.1, label = "Probability"), hjust = 0, vjust = -1, size = 10 / ggplot2::.pt) +
coord_equal() +
scale_fill_continuous(type = "viridis", trans = "log10", labels = scales::scientific_format(scale = 1)) +
labs(x = "EOFF after tauinv = 0.2 (s)",
y = "EOFF before tauinv = 0.2 (s)",
fill = NULL) +
theme(legend.direction = "horizontal",
legend.justification = 1,
legend.position = c(1, 0.9),
legend.key.height = unit(0.3, "cm"),
legend.key.width = unit(0.8, "cm"))
# Plot.
ptsize <- 12
ptsmall <- 8
theme_set(theme_bw())
theme_update(axis.text = element_text(size = ptsize, colour = "black", family = "sans"),
axis.line = element_line(colour = "black", size = 0.25),
axis.ticks = element_line(colour = "black", size = 0.25),
legend.key.width = unit(1.25, "cm"),
legend.key.height = unit(0.4, "cm"),
legend.margin = ggplot2::margin(t = -0.25, unit = 'cm'),
legend.spacing =  unit(0, "cm"),
legend.position = "bottom",
legend.text = element_text(size = ptsmall, colour = "black", family = "sans"),
legend.title = element_text(size = ptsmall, colour = "black", family = "sans"),
strip.background.x = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
plot.subtitle = element_text(size = ptsmall, colour = "black", family = "sans", face = "plain", hjust = 0),
plot.title = element_text(size = ptsize, colour = "black", family = "sans", face = "plain", hjust = 0),
text = element_text(size = ptsize, colour = "black", family = "sans"))
ggplot() +
geom_rect(data = biv, aes(xmin = before - 0.05, xmax = before + 0.05, ymin = after - 0.05, ymax = after + 0.05, fill = prob), colour = "black", size = 0.01) +
geom_text(aes(x = 3, y = 6.1, label = "Probability"), hjust = 0, vjust = -1, size = 10 / ggplot2::.pt) +
coord_equal() +
scale_fill_continuous(type = "viridis", trans = "log10", labels = scales::scientific_format(scale = 1)) +
labs(x = "EOFF after tauinv = 0.2 (s)",
y = "EOFF before tauinv = 0.2 (s)",
fill = NULL) +
theme(legend.direction = "horizontal",
legend.justification = 1,
legend.position = c(1, 0.9),
legend.key.height = unit(0.3, "cm"),
legend.key.width = unit(0.8, "cm"))
ggsave("BivDist.png", dpi = 1000, width = 90, height = 90, unit = "mm")
ggsave("Output(BivDist.png", dpi = 1000, width = 90, height = 90, unit = "mm")
ggsave("Output/BivDist.png", dpi = 1000, width = 90, height = 90, unit = "mm")
ggplot() +
geom_rect(data = biv, aes(xmin = before - 0.05, xmax = before + 0.05, ymin = after - 0.05, ymax = after + 0.05, fill = prob), colour = "black", size = 0.01) +
geom_text(aes(x = 3, y = 6, label = "Probability"), hjust = 0, vjust = -1, size = 10 / ggplot2::.pt) +
coord_equal() +
scale_fill_continuous(type = "viridis", trans = "log10", labels = scales::scientific_format(scale = 1)) +
labs(x = "EOFF after tauinv = 0.2 (s)",
y = "EOFF before tauinv = 0.2 (s)",
fill = NULL) +
theme(legend.direction = "horizontal",
legend.justification = 1,
legend.position = c(1, 0.9),
legend.key.height = unit(0.3, "cm"),
legend.key.width = unit(0.8, "cm"))
ggsave("Output/BivDist.png", dpi = 1000, width = 90, height = 90, unit = "mm")
ggplot() +
geom_rect(data = biv, aes(xmin = before - 0.05, xmax = before + 0.05, ymin = after - 0.05, ymax = after + 0.05, fill = prob), colour = "black", size = 0.01) +
geom_text(aes(x = 2.8, y = 6, label = "Probability"), hjust = 0, vjust = -1, size = 10 / ggplot2::.pt) +
coord_equal() +
scale_fill_continuous(type = "viridis", trans = "log10", labels = scales::scientific_format(scale = 1)) +
labs(x = "EOFF after tauinv = 0.2 (s)",
y = "EOFF before tauinv = 0.2 (s)",
fill = NULL) +
theme(legend.direction = "horizontal",
legend.justification = 1,
legend.position = c(1, 0.85),
legend.key.height = unit(0.3, "cm"),
legend.key.width = unit(0.8, "cm"))
ggsave("Output/BivDist.png", dpi = 1000, width = 90, height = 90, unit = "mm")
ggplot() +
geom_rect(data = biv, aes(xmin = before - 0.05, xmax = before + 0.05, ymin = after - 0.05, ymax = after + 0.05, fill = prob), colour = "black", size = 0.01) +
geom_text(aes(x = 2.8, y = 5.9, label = "Probability"), hjust = 0, vjust = -1, size = 10 / ggplot2::.pt) +
coord_equal() +
scale_fill_continuous(type = "viridis", trans = "log10", labels = scales::scientific_format(scale = 1)) +
labs(x = "EOFF after tauinv = 0.2 (s)",
y = "EOFF before tauinv = 0.2 (s)",
fill = NULL) +
theme(legend.direction = "horizontal",
legend.justification = 1,
legend.position = c(1, 0.85),
legend.key.height = unit(0.3, "cm"),
legend.key.width = unit(0.8, "cm"))
ggsave("Output/BivDist.png", dpi = 1000, width = 90, height = 90, unit = "mm")
ggplot() +
geom_rect(data = biv, aes(xmin = before - 0.05, xmax = before + 0.05, ymin = after - 0.05, ymax = after + 0.05, fill = prob), colour = "black", size = 0.01) +
geom_text(aes(x = 2.8, y = 5.7, label = "Probability"), hjust = 0, vjust = -1, size = 10 / ggplot2::.pt) +
coord_equal() +
scale_fill_continuous(type = "viridis", trans = "log10", labels = scales::scientific_format(scale = 1)) +
labs(x = "EOFF after tauinv = 0.2 (s)",
y = "EOFF before tauinv = 0.2 (s)",
fill = NULL) +
theme(legend.direction = "horizontal",
legend.justification = 1,
legend.position = c(1, 0.85),
legend.key.height = unit(0.3, "cm"),
legend.key.width = unit(0.8, "cm"))
ggsave("Output/BivDist.png", dpi = 1000, width = 90, height = 90, unit = "mm")
ggplot() +
geom_rect(data = biv, aes(xmin = before - 0.05, xmax = before + 0.05, ymin = after - 0.05, ymax = after + 0.05, fill = prob), colour = "black", size = 0.01) +
geom_text(aes(x = 2.85, y = 5.7, label = "Probability"), hjust = 0, vjust = -1, size = 10 / ggplot2::.pt) +
coord_equal() +
scale_fill_continuous(type = "viridis", trans = "log10", labels = scales::scientific_format(scale = 1)) +
labs(x = "EOFF after tauinv = 0.2 (s)",
y = "EOFF before tauinv = 0.2 (s)",
fill = NULL) +
theme(legend.direction = "horizontal",
legend.justification = 1,
legend.position = c(1, 0.85),
legend.key.height = unit(0.3, "cm"),
legend.key.width = unit(0.8, "cm"))
ggsave("Output/BivDist.png", dpi = 1000, width = 90, height = 90, unit = "mm")
glance
0.02 * 100
